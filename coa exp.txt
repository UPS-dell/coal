EXP_1
____________________________________________________________________________
Objective-1(ADDITION, SUBTRACTION, MULTIPLICATION,DIVISION) ; RES AT 0100:5000
mov ax, 8000h
mov cx, ax
mov ax, 3000h
mov [5000], ax
;add
add ax, cx
mov [5000h], ax
mov ax, cx
;sub
sub ax, 1000h
mov [5002h], ax
mov ax, cx
mov bx,0005h 
;mul
mul bx
mov [5004h], ax
mov [5006h], dx 
mov ax,cx 
;div
mov dx, 0000h    
div bx
mov [5008h], ax
mov [500Ah], dx
hlt

Objective-2(SWAPPING AND STORE DATA)// NORMALLY PUT 0100:2000 FOR OUTPUT
mov si , 2000h
mov [si] , 58h
mov al , [si]
mov cl , al
ror al , 04h
inc si
mov [si] , al
mov bl , al
mov bl , [si]
and al , bl
xor bl , cl
or al , bl 
inc si 
mov [si] , al
hlt

Objective-3(GRAY CODE)//PUT 0100:5000 FOR OUTPUT
mov al , 70h   
mov cl , al
shr al , 01h
xor al , cl
mov [5000h] , al
hlt
  
Objective-4(2'S COMPLEMENT) PUT 0100:5000 FOR OUTPUT
mov al , 20h
not al
add al , 01h
mov [5000h] , al    
hlt
----------------------------------------------------------------------
EXP_2
_____________________________________________________________
Objective-1(SUM AND AVERAGE) CHANGE 0000:3000 INPUT AS 01 02 TO 05 THEN EMULATE AND FIND OUTPUT AT 0000:3000
    MOV AX, 0000H
    MOV DX, AX
    MOV SI, 3000H
    MOV DI, 3010H
    MOV CH, 05H
L1:MOV BX, [SI]
MOV [DI], BX
INC SI
INC SI
INC DI
INC DI
DEC CL
JNZ L1
    HLT


Objective-2(COUNT NO OF 0'S)// CHANGE 0000:2000 TO 10 BEFORE UPDATION THEN EMULATE AND FIND AT 0000:2001
MOV AX, 0000H
MOV DS, AX
MOV SI, 2000H
MOV AL, [SI]
MOV CL, 08H
MOV CH, 00H
L2: SHR AL, 01H
JC L1
INC CH
L1: DEC CL
JNZ L2
INC SI
MOV [SI], CH
HLT

Objective-3(MOVE BLOCK 1 LOCATION TO ANOTHER) CHANGE 2000:3000 AT 10,20,30,40 THEN UPDATE 2000:5000 FOR OUTPUT
MOV AX,2000H
MOV DS,AX
MOV SI,3000H
MOV DI ,5000H
MOV CL,04H
L1: MOV BX,[SI]
MOV [DI],BX
INC SI
INC SI
INC DI
INC DI
DEC CL
JNZ L1
HLT

Objective-4(MULTIPLICATION OF 2 16 BIT NUMBER)//PUT 0000:2000 AND CHANGE 05 00 02 THEN EMULATE SEE RESULT AT 0000:2000
 MOV AX ,0000H
MOV DS,AX
MOV BX,[2000H]
MOV CX,[2002H]
MOV DX,0000H
L2: ADD AX,BX
JNC L1
INC DX
L1: DEC CX
JNZ L2
MOV [2004H],AX
MOV [2006H],DX
HLT

----------------------------------------------------------------------
EXP_3
_____________________________________________________________
Objective-1(LARGEST)//0710:0000 FOR ARRAY AND 0710:0007 FOR RESULT
.DATA
ARR_LENGTH DB 06H
ARR DB 04H, 01H, 07H,02H, 09H, 03H
RES DB 00H
.CODE
MAIN PROC
MOV AX, DATA
MOV DS, AX
MOV CL, ARR_LENGTH
DEC CL
LEA SI, ARR
MOV AL, [SI]
UP:
INC SI
CMP AL, [SI]
JNL DOWN//change JC DOWN for smallest 
MOV AL, [SI]
DOWN:
DEC CL
JNZ UP
LEA DI, RES
MOV [DI], AL
END MAIN

Objective-1(SMALLEST)//0710:0000 FOR ARRAY AND 0710:0007 FOR OUTPUT
.DATA
ARR_LENGTH DB 06H
ARR DB 04H, 01H, 07H,02H, 09H, 03H
RES DB 00H
.CODE
MAIN PROC
MOV AX, DATA
MOV DS, AX
MOV CL, ARR_LENGTH
DEC CL
LEA SI, ARR
MOV AL, [SI]
UP:
INC SI
CMP AL, [SI]
JC DOWN
MOV AL, [SI]
DOWN:
DEC CL
JNZ UP
LEA DI, RES
MOV [DI], AL
END MAIN

Objective-2(ASCENDING)
.DATA
ARR_LENGTH DB 06H
ARR DB 04H, 01H, 07H,02H, 09H, 03H
RES DB 00H
.CODE
MAIN PROC
MOV AX, DATA
MOV DS, AX
MOV CH, ARR_LENGTH
DEC CH
UP2: MOV CL, CH
LEA SI, ARR
UP1: MOV AL, [SI]
CMP AL, [SI+1]
JC DOWN //change JNC DOWN for descending
MOV DL, [SI+1]
XCHG [SI], DL
MOV [SI+1], DL
DOWN: INC SI
DEC CL
JNZ UP1
DEC CH
JNZ UP2
END MAIN

Objective-2(DESCENDING)
.DATA
ARR_LENGTH DB 06H
ARR DB 04H, 01H, 07H,02H, 09H, 03H
RES DB 00H
.CODE
MAIN PROC
MOV AX, DATA
MOV DS, AX
MOV CH, ARR_LENGTH
DEC CH
UP2: MOV CL, CH
LEA SI, ARR
UP1: MOV AL, [SI]
CMP AL, [SI+1]
JNC DOWN
MOV DL, [SI+1]
XCHG [SI], DL
MOV [SI+1], DL
DOWN: INC SI
DEC CL
JNZ UP1
DEC CH
JNZ UP2
END MAIN
----------------------------------------------------------------------
EXP_4
_____________________________________________________________
Objective-1(ADDITION , SUBTRACTION OF 32 BIT NUMBER)
.global _start
_start:
 mov r0,#0x40
 mov r1,#0x50
 adds r2, r0, r1
 subs r3, r0, r1
 mul r4, r0, r1
my_exit: b my_exit

KEIL CODE - OBJ1
---------------------------
 AREA PROG,CODE,READONLY
  ENTRY
START
    MOV R0,#0x50
	MOV R1,#0x40
	ADD R2,R0,R1
	SUB R3,R0,R1
EXIT B EXIT
  END

Objective-2(ADDITION, SUBTRACTION, MULTIPLICATION,DIVISION OF 32 BIT NUMBER)
------------------------------------------------------------------------------------------------------------------------------------------------
.global _start
_start:
ldr r0,=0x10100000
ldr r1,[r0],#4
ldr r2,[r0],#4
add r3,r1,r2
str r3,[r0],#4
sub r4,r1,r2
str r4,[r0],#4
mul r5,r1,r2
str r5,[r0],#4
my_exit: b my_exit

KEIL CODE -OBJ 2
---------------------------------------------------------------
	
Objective-3(PERFORM AND,OR,XOR & NOT)
.global _start
_start:
ldr r0, =0x10100000
ldr r1, [r0], #4
ldr r2, [r0], #4
and r3, r2, r1	
str r3, [r0], #4
orr r4, r2, r1	
str r4, [r0], #4
eor r5, r2, r1	
str r5, [r0], #4
mvn r6, r1		
str r6, [r0]
my_exit:b my_exit	
	 
    
----------------------------------------------------------------------
EXP_5
_____________________________________________________________    

Objective-1(LARGEST IN ARRAY)
    .global _start
    _start:
	
	 ldr r0, =count
	 ldr r1, [r0]
	 mov r4, =0xff
	 ldr r2, =array
    back:  ldr r3, [r2], #4
	   cmp r4, r3
	   blt fwd
           mov r4, r3

    fwd:  subs r1, r1, #01
          bne back
          str r4, [r2]
    exit: b exit
    .data
	 count:	.word 0x05
	 array: .word 0x15, 0x35, 0x45, 0x10, 0x4f 
    result: 

IN KEIL OBJ -1
-----------------------------------------
 AREA PROG1, CODE, READONLY
  ENTRY
START
    ldr r0,=count
    ldr r1,[r0]  ;r1=array size
    ldr r2,=array
    ldr r3,[r2],#4
back
    subs r1, r1, #01
    beq fwd
    ldr r4,[r2],#4
    cmp r3, r4
    bgt back
    mov r3, r4
    b back
fwd
    ldr r5,=RESULT
    str r3,[r5]
exit b exit

count DCD 0x07
array
     DCD 0x15 
     DCD 0x35 
     DCD 0x32
     DCD 0x45
     DCD 0x10
     DCD 0x4f
     DCD 0x34
 AREA DATA2, DATA, READWRITE  
RESULT
     DCD 0X0
  END

  Objectiv-1.2(SMALLEST IN ARRAY)
        .global _start
        _start:
	
	   ldr r0, =count
           ldr r1, [r0]
	   ldr r3, =array
	   ldr r4, =even
	   ldr r5, =odd	
        back:	
		ldr r0, [r3], #4
		ands r7 ,r6, #01
		beq fwd
		str r6, [r5], #4
		b fwd1
        fwd:	str r6, [r4], #4
        fwd1: 	subs r1, r1, #01
		bne back
        exit: b exit		
        .data
		count:	.word 0x07
		array:	.word 0x15, 0x35, 0x32, 0x45, 0x10, 0x4F, 0x34
		odd: 	.word 0,0,0,0,0
		even: 	.word 0,0,0,0,0
        result:

Objective-2(EVEN & ODD NUMBER SEPARATE) IN CPULATOR
     .global _start
        _start:
	
	   ldr r0, =count
           ldr r1, [r0]
	   mov r4, =0xff
	   ldr r2, =array	
        back:	
		ldr r3, [r2], #4
		cmp r4, r3
		blt fwd
		mov r4, r3
        fwd1: 	subs r1, r1, #01
		bne back
                str r4, [r2]
        exit: b exit		
        .data
		count:	.word 0x05
		array:	.word 0x15, 0x35, 0x45, 0x10, 0x4F
        result:

IN KEIL OBJECTIVE -2
----------------------------------------------------------------
 AREA PROG2,CODE,READONLY
  ENTRY ; MARK  FIRST  INSTRUCTION TO ACCURATE
START
	ldr r0,=count
	ldr r1,[R0]
	ldr r3,=array;r3=base adress of array=array[0]
	ldr r4,=even
	ldr r5,=odd
back
	ldr r6,[r3],#4
	ands r7,r6,#1
	beq fwd
	str r6,[r5],#4
	b fwd1
fwd
    str r6,[r4],#4
fwd1
    subs r1,r1,#01
	bne back
exit b exit
;Array Declaration
count DCD 0x07
array
	DCD 0x15
	DCD 0x35
	DCD 0x32
	DCD 0x45
	DCD 0x10
	DCD 0x4f
    DCD 0x3f
 AREA DATA2,DATA,READWRITE;TO STORE RESULT IN GIVEN ADRESS
even
    DCD 0x0
	DCD 0x0
	DCD 0x0
	DCD 0x0
	DCD 0x0
	DCD 0x0
    DCD 0x0
odd
    DCD 0x0
	DCD 0x0
	DCD 0x0
	DCD 0x0
	DCD 0x0
	DCD 0x0
    DCD 0x0
		
  END
   
 
